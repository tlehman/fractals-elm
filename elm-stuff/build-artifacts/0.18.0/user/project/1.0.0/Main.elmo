var _user$project$Main$addp = F2(
	function (p, q) {
		return _elm_lang$core$Native_Utils.update(
			p,
			{x: p.x + q.x, y: p.y + q.y});
	});
var _user$project$Main$shift = F2(
	function (p, ln) {
		return _elm_lang$core$Native_Utils.update(
			ln,
			{
				a: A2(_user$project$Main$addp, ln.a, p),
				b: A2(_user$project$Main$addp, ln.b, p)
			});
	});
var _user$project$Main$scalePoint = F2(
	function (pt, factor) {
		return _elm_lang$core$Native_Utils.update(
			pt,
			{x: pt.x * factor, y: pt.y * factor});
	});
var _user$project$Main$scale = F2(
	function (factor, ln) {
		return _elm_lang$core$Native_Utils.update(
			ln,
			{
				a: A2(_user$project$Main$scalePoint, ln.a, factor),
				b: A2(_user$project$Main$scalePoint, ln.b, factor)
			});
	});
var _user$project$Main$rotateP = F2(
	function (angle, p) {
		return {
			x: (p.x * _elm_lang$core$Basics$cos(angle)) - (p.y * _elm_lang$core$Basics$sin(angle)),
			y: (p.x * _elm_lang$core$Basics$sin(angle)) + (p.y * _elm_lang$core$Basics$cos(angle))
		};
	});
var _user$project$Main$rotate = F2(
	function (angle, ln) {
		var r = _user$project$Main$rotateP(angle);
		return {
			a: r(ln.a),
			b: r(ln.b)
		};
	});
var _user$project$Main$Point = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Main$cantorStep = function (ln) {
	var scaleFactor = 0.33333;
	var shiftFactor = 2 * scaleFactor;
	var left = A2(_user$project$Main$scale, scaleFactor, ln);
	var right = A2(
		_user$project$Main$shift,
		A2(_user$project$Main$Point, shiftFactor, 0),
		left);
	return {
		ctor: '::',
		_0: left,
		_1: {
			ctor: '::',
			_0: right,
			_1: {ctor: '[]'}
		}
	};
};
var _user$project$Main$kochStep = function (ln) {
	var scaleFactor = 0.33333;
	var shiftFactor = 2 * scaleFactor;
	var r = _user$project$Main$shift(
		A2(_user$project$Main$Point, shiftFactor, 0));
	var s = _user$project$Main$scale(scaleFactor);
	var left = s(ln);
	var right = r(left);
	var m = _user$project$Main$shift(
		A2(_user$project$Main$Point, scaleFactor, 0));
	var innerLeft = m(
		A2(_user$project$Main$rotate, (0 - _elm_lang$core$Basics$pi) / 3, left));
	var n = _user$project$Main$shift(
		A2(_user$project$Main$Point, 0 - scaleFactor, 0));
	var innerRight = r(
		A2(
			_user$project$Main$rotate,
			_elm_lang$core$Basics$pi / 3,
			n(left)));
	return {
		ctor: '::',
		_0: left,
		_1: {
			ctor: '::',
			_0: innerLeft,
			_1: {
				ctor: '::',
				_0: innerRight,
				_1: {
					ctor: '::',
					_0: right,
					_1: {ctor: '[]'}
				}
			}
		}
	};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		return {
			ctor: '_Tuple2',
			_0: A2(_ccapndave$elm_flat_map$List_FlatMap$flatMap, _user$project$Main$kochStep, model),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Main$transform = function (ln) {
	return A2(
		_user$project$Main$shift,
		A2(_user$project$Main$Point, 50, 250),
		A2(_user$project$Main$scale, 640, ln));
};
var _user$project$Main$renderLine = function (ln) {
	var lnr = _user$project$Main$transform(ln);
	var _p1 = {ctor: '_Tuple2', _0: lnr.a, _1: lnr.b};
	var a = _p1._0;
	var b = _p1._1;
	var x1s = _elm_lang$core$Basics$toString(a.x);
	var y1s = _elm_lang$core$Basics$toString(a.y);
	var x2s = _elm_lang$core$Basics$toString(b.x);
	var y2s = _elm_lang$core$Basics$toString(b.y);
	return A2(
		_elm_lang$svg$Svg$line,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$x1(x1s),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$y1(y1s),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x2(x2s),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y2(y2s),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$strokeWidth('1'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('640'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height('640'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 640 700'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#DCB35C'),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		A2(_elm_lang$core$List$map, _user$project$Main$renderLine, model));
};
var _user$project$Main$Line = F2(
	function (a, b) {
		return {a: a, b: b};
	});
var _user$project$Main$init = function () {
	var b = A2(_user$project$Main$Point, 1, 0);
	var a = A2(_user$project$Main$Point, 0, 0);
	var interval = A2(_user$project$Main$Line, a, b);
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$kochStep(interval),
		_1: _elm_lang$core$Platform_Cmd$none
	};
}();
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second * 2, _user$project$Main$Tick);
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
